security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # cette section definit les encoders en utilisant des users qui proviennent de la DB
        my_entity_provider:  { entity: { class: 'App\Entity\Users', property: email } }

        # users_in_memory: { memory: null }
        # users:
        #     entity:
        #     # the class of the entity that represents users
        #         class: 'App\Entity\Users'
        #         property: 'email'
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: my_entity_provider # utiliser mon_provider aulieu du #users_in_memory
            form_login:
                login_path: 'login'
                check_path: 'login' # chemin utiliser pour la verification du user
                
            remember_me:
                secret:   '%kernel.secret%' # required
                lifetime: 604800 # 1 week in seconds

            custom_authenticator: App\Security\UsersAuthenticator
            entry_point: form_login
            logout:
                path: app_logout
                # where to redirect after logout
                target: 'login'

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        # - { path: ^/home, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # configuration pour hasher le password de tous les users
            App\Entity\Users:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon

            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
